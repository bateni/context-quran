%D \module
%D   [      file=p-quran-text,
%D        version=0.25,
%D          title=\CONTEXT\ User Module,
%D       subtitle=quran-text,
%D         author={Mohammad Hossein Bateni},
%D           date=\currentdate,
%D      copyright={Mohammad Hossein Bateni},
%D        license=GNU General Public License v3]

% dabeer module for Persian typesetting in ConTeXt
% Copyright (C) 2015, 2016  Mohammad Hossein Bateni

% This program is free software; you can redistribute it and/or
% modify it under the terms of the GNU General Public License
% as published by the Free Software Foundation; either version 3
% of the License, or (at your option) any later version.

% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.

% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

%D The \LUA\ code should go to inside a \LUA\ file but let us keep it
%D here for now.  We read the meta data, compute prefix sums, and load
%D all the buffer definitions.
\startluacode
qurantext = qurantext or {}

local function init()
  qurantext.data = dofile(resolvers.findfile('quran-meta.lua'))
  qurantext.psum = {}
  local psum = 0
  for chap, info in ipairs(qurantext.data.chapters) do
    psum = psum + info.verses
    qurantext.psum[chap] = psum
  end
end

local function error(msg)
  print('quran-text error:', msg)
end

local function loadversechunk(chap,ver)
  local my_chap = qurantext.data.chapters[chap]
  if not my_chap then
    error('invalid chapter number ' .. chap)
    return
  end
  if ver < 1 or ver > my_chap.verses then
    error('invalid verse number ' .. ver .. ' in chapter ' .. chap)
    return
  end
  local global_verse = qurantext.psum[chap - 1] or 0
  global_verse = global_verse + ver
  local chunk = math.floor(global_verse / qurantext.data.verses_per_chunk)
  context.begingroup()
  context("\\def\\q{quran-text}")
  context.input('quran-text-' .. chunk .. '.tex')
  context.endgroup()  
end

qurantext.loadversechunk = loadversechunk
init()
\stopluacode


%D This is the main interface to the module. The two arguments are the
%D chapter and verse number, respectively.
%D TODO: option to not mark end of verse.
\define[2]\ShowVerse{%
  \doifelsebuffer{quran-text:#1:#2}{}{\directlua{qurantext.loadversechunk(#1,#2)}}%
  \getbuffer[quran-text:#1:#2]~\qurantextayamarker{#2}
}

\unprotect

%D We next define different styles of marking the end of verses
\define[1]\ayamarker_a{#1}  % as plain as it gets
\define[1]\ayamarker_b{(\arabicdecimals{#1})}  % use parentheses
\define[1]\ayamarker_c{﴿\arabicdecimals{#1}﴾}  % use decorative parentheses
\define[1]\ayamarker_d{۝\arabicdecimals{#1}}   % use end-of-aya marker

\def\qurantextayamarker{\csname ayamarker_\qurantext_ayamarker_alternative\endcsname}

%D Here is how we set the style for end-of-aya marker.
\define[1]\SetEndOfVerseStyle{%
  \gdef\qurantext_ayamarker_alternative{#1}}
\SetEndOfVerseStyle{d}  %% default

\protect
